/*
 * This file is part of Stack Wallet.
 *
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';
import 'dart:io';

import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
// import 'package:flutter_libmonero/git_versions.dart' as MONERO_VERSIONS;
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../../app_config.dart';
import '../../../../providers/global/prefs_provider.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/assets.dart';
import '../../../../utilities/logger.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../widgets/background.dart';
import '../../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/rounded_white_container.dart';
import '../../../../widgets/stack_dialog.dart';

class LoggingSettingsView extends ConsumerStatefulWidget {
  const LoggingSettingsView({super.key});

  static const String routeName = "/loggingView";

  @override
  ConsumerState<LoggingSettingsView> createState() =>
      _LoggingSettingsViewState();
}

class _LoggingSettingsViewState extends ConsumerState<LoggingSettingsView> {
  late final TextEditingController fileLocationController;
  bool _lock = false;

  Future<void> _edit() async {
    final currentPath = ref.read(prefsChangeNotifierProvider).logsPath ??
        Logging.instance.logsDirPath;
    final newPath = await _pickDir(context, currentPath);

    // test if has permission to write
    if (newPath != null) {
      final file = File(
        "$newPath${Platform.pathSeparator}._test",
      );
      if (!file.existsSync()) {
        file.createSync();
        file.deleteSync();
      }
    }

    // success
    ref.read(prefsChangeNotifierProvider).logsPath = newPath;

    if (mounted) {
      setState(() {
        fileLocationController.text =
            ref.read(prefsChangeNotifierProvider).logsPath ??
                Logging.instance.logsDirPath;
      });
    }
  }

  Future<String?> _pickDir(BuildContext context, String currentPath) async {
    final String? chosenPath;
    // if (Platform.isIOS) {
    //   chosenPath = currentPath;
    // } else {
    final String path =
        Platform.isWindows ? currentPath.replaceAll("/", "\\") : currentPath;
    chosenPath = await FilePicker.platform.getDirectoryPath(
      dialogTitle: "Choose Log Save location",
      initialDirectory: path,
      lockParentWindow: true,
    );
    // }
    return chosenPath;
  }

  @override
  void initState() {
    super.initState();
    fileLocationController = TextEditingController();
    fileLocationController.text =
        ref.read(prefsChangeNotifierProvider).logsPath ??
            Logging.instance.logsDirPath;
  }

  @override
  void dispose() {
    fileLocationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Background(
      child: Scaffold(
        backgroundColor: Theme.of(context).extension<StackColors>()!.background,
        appBar: AppBar(
          leading: AppBarBackButton(
            onPressed: () async {
              Navigator.of(context).pop();
            },
          ),
          title: Text(
            "Logging",
            style: STextStyles.navBarTitle(context),
          ),
          // actions: [
          //   Padding(
          //     padding: const EdgeInsets.only(
          //       top: 10,
          //       bottom: 10,
          //       right: 10,
          //     ),
          //     child: AspectRatio(
          //       aspectRatio: 1,
          //       child: AppBarIconButton(
          //         key: const Key("deleteLogsAppBarButtonKey"),
          //         size: 36,
          //         shadows: const [],
          //         color: Theme.of(context).extension<StackColors>()!.background,
          //         icon: SvgPicture.asset(
          //           Assets.svg.trash,
          //           color: Theme.of(context)
          //               .extension<StackColors>()!
          //               .accentColorDark,
          //           width: 20,
          //           height: 20,
          //         ),
          //         onPressed: () async {
          //           await showDialog<void>(
          //             context: context,
          //             builder: (_) => StackDialog(
          //               title: "Delete logs?",
          //               message:
          //                   "You are about to delete all logs permanently. Are you sure?",
          //               leftButton: TextButton(
          //                 style: Theme.of(context)
          //                     .extension<StackColors>()!
          //                     .getSecondaryEnabledButtonStyle(context),
          //                 child: Text(
          //                   "Cancel",
          //                   style: STextStyles.itemSubtitle12(context),
          //                 ),
          //                 onPressed: () {
          //                   Navigator.of(context).pop();
          //                 },
          //               ),
          //               rightButton: TextButton(
          //                 style: Theme.of(context)
          //                     .extension<StackColors>()!
          //                     .getPrimaryEnabledButtonStyle(context),
          //                 child: Text(
          //                   "Delete logs",
          //                   style: STextStyles.button(context),
          //                 ),
          //                 onPressed: () async {
          //                   Navigator.of(context).pop();
          //
          //                   bool shouldPop = false;
          //                   unawaited(
          //                     showDialog<dynamic>(
          //                       barrierDismissible: false,
          //                       context: context,
          //                       builder: (_) => WillPopScope(
          //                         onWillPop: () async {
          //                           return shouldPop;
          //                         },
          //                         child: const CustomLoadingOverlay(
          //                           message: "Deleting logs...",
          //                           eventBus: null,
          //                         ),
          //                       ),
          //                     ),
          //                   );
          //
          //                   await ref
          //                       .read(debugServiceProvider)
          //                       .deleteAllLogs();
          //
          //                   shouldPop = true;
          //
          //                   if (mounted) {
          //                     Navigator.pop(context);
          //                     unawaited(
          //                       showFloatingFlushBar(
          //                         type: FlushBarType.info,
          //                         context: context,
          //                         message: 'Logs cleared!',
          //                       ),
          //                     );
          //
          //                     setState(() {});
          //                   }
          //                 },
          //               ),
          //             ),
          //           );
          //         },
          //       ),
          //     ),
          //   ),
          // ],
        ),
        body: SafeArea(
          child: Padding(
            padding: const EdgeInsets.only(
              top: 12,
              left: 16,
              right: 16,
            ),
            child: Column(
              children: [
                Row(
                  children: [
                    Text(
                      "Log files location",
                      style: STextStyles.fieldLabel(context),
                      textAlign: TextAlign.left,
                    ),
                  ],
                ),
                const SizedBox(
                  height: 16,
                ),
                TextField(
                  autocorrect: false,
                  enableSuggestions: false,
                  controller: fileLocationController,
                  style: STextStyles.field(context),
                  decoration: InputDecoration(
                    hintText: "Save to...",
                    hintStyle: STextStyles.fieldLabel(context),
                    suffixIcon: UnconstrainedBox(
                      child: Row(
                        children: [
                          const SizedBox(
                            width: 16,
                          ),
                          SvgPicture.asset(
                            Assets.svg.folder,
                            color: Theme.of(context)
                                .extension<StackColors>()!
                                .textDark3,
                            width: 16,
                            height: 16,
                          ),
                          const SizedBox(
                            width: 12,
                          ),
                        ],
                      ),
                    ),
                  ),
                  key: const Key(
                    "logsDirPathLocationControllerKey",
                  ),
                  readOnly: true,
                  toolbarOptions: const ToolbarOptions(
                    copy: true,
                    cut: false,
                    paste: false,
                    selectAll: false,
                  ),
                  onChanged: (newValue) {},
                ),
                const SizedBox(
                  height: 16,
                ),
                Row(
                  children: [
                    Expanded(
                      child: RoundedWhiteContainer(
                        child: Text(
                          "NOTE: ${AppConfig.appName} must be restarted in order"
                          " for the new path to take effect.",
                          style: STextStyles.subtitle500(context),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(
                  height: 16,
                ),
                const Spacer(),
                PrimaryButton(
                  label: "Edit",
                  onPressed: () async {
                    if (_lock) {
                      return;
                    }
                    _lock = true;
                    try {
                      await _edit();
                    } catch (e, s) {
                      Logging.instance.e(
                        "Failed to change logs path",
                        error: e,
                        stackTrace: s,
                      );
                      if (context.mounted) {
                        final String err;
                        if (e
                            .toString()
                            .contains("OS Error: Operation not permitted")) {
                          err = "Cannot use chosen location";
                        } else {
                          err = e.toString();
                        }

                        unawaited(
                          showDialog(
                            context: context,
                            builder: (context) => StackOkDialog(
                              title: "Failed to change logs path",
                              message: err,
                            ),
                          ),
                        );
                      }
                    } finally {
                      _lock = false;
                    }
                  },
                ),
                const SizedBox(
                  height: 16,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
